str=age
AGE
str(age)
str(AGE)
demo()
demo(package = .packages(all.available = TRUE))
str(age)
str(age)=
mn''
str(ADNI)
str(ADNI.txt)
ADNI <- read.delim("~/Downloads/ADNI.txt", header=FALSE)
View(ADNI)
str(ADNI)
str(ADNI) variable.names()
str(ADNI)
str(ADNI)
str(AGE)
str(V1)
use_git()
# Install tidyverse
install.packages("tidyverse")
# Load the tidyverse package
library(tidyverse)
# Set working directory
setwd("/Users/emilychaiadams/Documents/EDA R Project")
# Import TSV file into data frame
cancer_mut_data <- read_tsv('Cosmic_MutantCensus_v100_GRCh37.tsv')
# Check the structure of the main dataset
str(cancer_mut_data)
# Preview the main dataset
view(head(cancer_mut_data, 10))
# Load the additional information dataset
cosmic_class <- read_tsv('Cosmic_Classification_v100_GRCh37.tsv')
# Check the structure of the info dataset
str(cosmic_class)
# Preview the info dataset
view(head(cosmic_class, 10))
# Merge the datasets based on the common variable
cancer_mut_data_class <- cancer_mut_data %>%
left_join(cosmic_class, by = "COSMIC_PHENOTYPE_ID")
# View the first few rows of the merged dataset
head(cancer_mut_data_class)
# Count unique values for COSMIC_PHENOTYPE_ID
unique_values <- cancer_mut_data_class %>%
summarize(unique_values = n_distinct(COSMIC_PHENOTYPE_ID))
print(unique_values)
# Count unique values in PRIMARY_SITE
unique_values <- cancer_mut_data_class %>%
summarize(unique_values = n_distinct(PRIMARY_SITE))
print(unique_values)
# Calculate PRIMARY_SITE value frequencies in descending order
ordered_freq_PRIMARY_SITE <- cancer_mut_data_class %>%
count(PRIMARY_SITE) %>%
arrange(desc(n))
view(ordered_freq_PRIMARY_SITE)
# View column names to check order
names(cancer_mut_data_class)
# Delete COSMIC_PHENOTYPE_ID to be replaced by PRIMARY_SITE
cancer_mut_data_class <- cancer_mut_data_class %>%
select(-COSMIC_PHENOTYPE_ID)
print(cancer_mut_data_class)
# Move PRIMARY_SITE
cancer_mut_data_class <- cancer_mut_data_class %>%
relocate(PRIMARY_SITE, .after = TRANSCRIPT_ACCESSION)
# View column names to check edited order
names(cancer_mut_data_class)
# Count GENOMIC_MUTATION_ID value frequencies in descending order
ordered_freq_GENOMIC_MUTATION_ID <- cancer_mut_data_class %>%
count(GENOMIC_MUTATION_ID) %>%
arrange(desc(n))
print(ordered_freq_GENOMIC_MUTATION_ID, n = 30)
# Filter rows where GENOMIC_MUTATION_ID is NA
NA_GENOMIC_MUTATION_ID <- cancer_mut_data_class %>%
filter(is.na(GENOMIC_MUTATION_ID))
# Find NA values in other columns within the subset
NA_summary <- NA_GENOMIC_MUTATION_ID %>%
summarize(across(everything(), ~ sum(is.na(.)), .names = "NA_{col}"))
# View the summary to determine if MUTATION_ID NA values are missing enough
# data to be eliminated from the set
view(NA_summary)
# Filter out rows where GENOMIC_MUTATION_ID is NA
cancer_mut_data_class <- cancer_mut_data_class %>%
filter(!is.na(GENOMIC_MUTATION_ID))
# Calculate ordered frequency without NA
ordered_freq_GENOMIC_MUTATION_ID <- cancer_mut_data_class %>%
count(GENOMIC_MUTATION_ID) %>%
rename(COUNT = n) %>%  # Rename 'n' column to 'COUNT'
arrange(desc(COUNT))
print(ordered_freq_GENOMIC_MUTATION_ID, n = 30)
# Calculate total count of GENOMIC_MUTATION_ID entries
total_count <- sum(ordered_freq_GENOMIC_MUTATION_ID$COUNT)
# Calculate proportions
prop_freq_GENOMIC_MUTATION_ID <- ordered_freq_GENOMIC_MUTATION_ID %>%
mutate(
PROPORTION = COUNT / total_count)
print(head(prop_freq_GENOMIC_MUTATION_ID, 30))
# Print the top 30 mutation IDs with their frequencies and proportions
print(prop_freq_GENOMIC_MUTATION_ID, n = 30)
print(nrow(prop_freq_GENOMIC_MUTATION_ID))
# Join frequency and proportion data to the original dataset
cancer_mut_data_class <- cancer_mut_data_class %>%
left_join(prop_freq_GENOMIC_MUTATION_ID, by = "GENOMIC_MUTATION_ID")
# Select only the GENOMIC_MUTATION_ID column and subset of variables
selected_data <- cancer_mut_data_class %>%
select(GENOMIC_MUTATION_ID, COUNT, PROPORTION)
# View the selected columns
view(head(selected_data, n = 30))
# Move GENOMIC_MUTATION_ID column and subset of variables all the way left
cancer_mut_data_class <- cancer_mut_data_class %>%
relocate(GENOMIC_MUTATION_ID, COUNT, PROPORTION, .before = GENE_SYMBOL)
# Sort the dataset by Count in descending order
cancer_mut_data_class <- cancer_mut_data_class %>%
arrange(desc(COUNT))
# Get the first 50 rows
view(head(cancer_mut_data_class, 50))
# Check for consistency of PRIMARY_SITE within each GENOMIC_MUTATION_ID
consistency_check <- cancer_mut_data_class %>%
group_by(GENOMIC_MUTATION_ID) %>%
summarize(
unique_sites = n_distinct(PRIMARY_SITE),
consistent = unique_sites == 1,
.groups = 'drop'
)
# Print the consistency check
summary(consistency_check)
# Rename the new columns
consistency_check <- consistency_check %>%
rename(
UNIQUE_PRIMARY_SITES = unique_sites,
PRIMARY_SITE_CONSISTENCY = consistent
)
# Merge inconsistency data into the main dataset
cancer_mut_data_class <- cancer_mut_data_class %>%
left_join(consistency_check, by = "GENOMIC_MUTATION_ID")
# Get the first 50 rows
view(head(cancer_mut_data_class, 50))
# Move new columns next to PRIMARY_SITE
cancer_mut_data_class <- cancer_mut_data_class %>%
relocate(UNIQUE_PRIMARY_SITES, PRIMARY_SITE_CONSISTENCY, .after = PRIMARY_SITE)
# Check that GENOME_START and GENOME_STOP values are the same in a row
consistency_check2 <- cancer_mut_data_class %>%
reframe(
Consistent_Start_Stop = GENOME_START == GENOME_STOP
)
#View results
summary(consistency_check2) # Mostly point mutations but a good chunk of longer indels
# Calculate the mutation length and create a new column
cancer_mut_data_class <- cancer_mut_data_class %>%
mutate(BASE_LENGTH = (GENOME_STOP - GENOME_START) + 1)
# Check for missing values
na_indices_BASE_LENGTH <- which(is.na(cancer_mut_data_class$BASE_LENGTH))
# Print the indices with NA in BASE_LENGTH
print(na_indices_BASE_LENGTH)
# Filter the rows with NA in BASE_LENGTH and select GENOME_START and GENOME_STOP columns
na_genome_values <- cancer_mut_data_class %>%
filter(is.na(BASE_LENGTH)) %>%
select(GENOME_START, GENOME_STOP)
# Print the GENOME_START and GENOME_STOP values for rows with NA in BASE_LENGTH
print(na_genome_values)
# Rearrange the columns
cancer_mut_data_class <- cancer_mut_data_class %>%
select(
# Select all columns up to and including GENE_SYMBOL
GENOMIC_MUTATION_ID:GENE_SYMBOL,
# Move the specified columns after GENE_SYMBOL
CHROMOSOME, BASE_LENGTH, GENOME_START, GENOME_STOP, MUTATION_CDS, GENOMIC_WT_ALLELE, GENOMIC_MUT_ALLELE, STRAND, MUTATION_DESCRIPTION, PRIMARY_SITE, UNIQUE_PRIMARY_SITES, PRIMARY_SITE_CONSISTENCY, SITE_SUBTYPE_1, SITE_SUBTYPE_2, SITE_SUBTYPE_3, PRIMARY_HISTOLOGY, HISTOLOGY_SUBTYPE_1, HISTOLOGY_SUBTYPE_2, HISTOLOGY_SUBTYPE_3, MUTATION_SOMATIC_STATUS, MUTATION_ZYGOSITY, LOH,
# Select the remaining columns
everything()
)
# View the reordered dataframe
view(head(cancer_mut_data_class))
# Filter rows where a specific condition is met
filtered_skin <- cancer_mut_data_class %>%
filter(PRIMARY_SITE == "skin")
view(head(filtered_skin, 50))
# Get a feel for the numerical data
nrow(filtered_skin)
summary(filtered_skin$COUNT)
# Check consistency for all variables
consistency_check_all <- filtered_skin %>%
group_by(GENOMIC_MUTATION_ID) %>%
summarize(across(everything(), ~n_distinct(.x) == 1, .names = "Consistent_{.col}"),
.groups = 'drop')
# Which variables are inconsistent among distinct GENOMIC_MUTATION_ID values?
# View summary
summary(consistency_check_all)
# Check for consistency within each distinct GENOMIC_MUTATION_ID GENOME_START
consistency_check3 <- filtered_skin %>%
group_by(GENOMIC_MUTATION_ID, GENOME_START) %>%
summarize(
Consistent_Start_Stop = n_distinct(GENOME_STOP) == 1,
.groups = 'drop'
)
# View the results
summary(consistency_check3) # All unique GENOMIC_MUTATION_ID values have unique start and stop values
# Prepare the data for plotting
filtered_skin_distinct <- filtered_skin %>%
select(GENOMIC_MUTATION_ID, GENOME_START, GENOME_STOP) %>%
distinct()  # Ensure only one row for each GENOMIC_MUTATION_ID is included
# Calculate quartiles and IQR using dplyr
quartiles <- filtered_skin_distinct %>%
summarise(
Q1 = quantile(GENOME_START, 0.25),
Q3 = quantile(GENOME_START, 0.75),
IQR = IQR(GENOME_START)
)
print(quartiles)
# Calculate bin width using Freedman-Diaconis rule
bin_width <- quartiles$IQR / (nrow(filtered_skin_distinct)^(1/3))
print(bin_width)
# Create histogram of genome start positions for skin cancer mutations
ggplot(filtered_skin_distinct, aes(x = GENOME_START)) +
geom_histogram(binwidth = bin_width, fill = "skyblue", color = "black") +
labs(
title = "Distribution of Genome Start Positions for Skin Cancer Associated Mutations",
x = "Genomic Location (Base Pair)",
y = "Number of Mutations"
) +
theme_minimal()
# Prepare the data for plotting
filtered_skin_distinct2 <- filtered_skin %>%
select(GENOMIC_MUTATION_ID, UNIQUE_PRIMARY_SITES, PROPORTION) %>%
distinct()  # Ensure each GENOMIC_MUTATION_ID is unique
view(head(filtered_skin_distinct2, 30))
nrow(filtered_skin_distinct2)
# Make sure both y variables are numeric
str(filtered_skin_distinct2)
# Convert Unique_Primary_Sites_GMID column to numeric
filtered_skin_distinct2 <- filtered_skin_distinct2 %>%
mutate(
UNIQUE_PRIMARY_SITES = as.numeric(UNIQUE_PRIMARY_SITES))
# Fit linear model
model <- lm(PROPORTION ~ UNIQUE_PRIMARY_SITES, data = filtered_skin_distinct2)
# Summary of the model
summary(model)
# Create the scatter plot
ggplot(filtered_skin_distinct2, aes(x = UNIQUE_PRIMARY_SITES, y = PROPORTION)) +
geom_point(color = "blue") +
geom_smooth(method = "lm", color = "red") +  # Add trend line
labs(
title = "Correlating Proportions and Primary Site Counts for Skin Cancer Mutations",
x = "Number of Unique Primary Sites",
y = "Proportion of Mutations in Genome"
) +
theme_minimal()
# Check for non-numeric values in CHROMOSOME column
non_numeric_values <- filtered_skin %>%
filter(!is.na(CHROMOSOME) & !grepl("^\\d+$", CHROMOSOME)) %>%
select(CHROMOSOME)
# Ensure unique GENOMIC_MUTATION_IDs, select relevant columns, and exclude NA values
filtered_skin_distinct3 <- filtered_skin %>%
distinct(GENOMIC_MUTATION_ID, .keep_all = TRUE) %>%  # Keep only distinct GENOMIC_MUTATION_IDs
select(GENOMIC_MUTATION_ID, CHROMOSOME, PRIMARY_SITE_CONSISTENCY) %>%    # Select relevant columns
filter(!is.na(CHROMOSOME) & !is.na(PRIMARY_SITE_CONSISTENCY))  # Exclude NA values
# Create a contingency table
contingency_table <- table(filtered_skin_distinct3$CHROMOSOME, filtered_skin_distinct3$PRIMARY_SITE_CONSISTENCY)
view(head(contingency_table))
# Perform the Chi-Square Test
chi_sq_test <- chisq.test(contingency_table)
print(chi_sq_test)
# Calculate the proportion of GENOMIC_MUTATION_IDs with Primary_Sites_Consistency = "TRUE" for each chromosome
site_consistency_chromo_proptable <- filtered_skin_distinct3 %>%
group_by(CHROMOSOME) %>%
summarize(
TOTAL_UNIQUE_MUTATIONS = n_distinct(GENOMIC_MUTATION_ID),
PRIMARY_SITE_CONSISTENCY_COUNT = sum(PRIMARY_SITE_CONSISTENCY == "TRUE"),
PRIMARY_SITE_CONSISTENCY_PROP = PRIMARY_SITE_CONSISTENCY_COUNT / TOTAL_UNIQUE_MUTATIONS,
.groups = 'drop'
)
# Convert CHROMOSOME to a factor with specific levels to order
site_consistency_chromo_proptable <- site_consistency_chromo_proptable %>%
mutate(CHROMOSOME = factor(CHROMOSOME, levels = c(1:22, "X"))) %>%
arrange(CHROMOSOME)
view(site_consistency_chromo_proptable)
# Calculate standard error
site_consistency_chromo_proptable <- site_consistency_chromo_proptable %>%
mutate(
Standard_Error = sqrt((PRIMARY_SITE_CONSISTENCY_PROP * (1 - PRIMARY_SITE_CONSISTENCY_PROP)) / TOTAL_UNIQUE_MUTATIONS),
CI_Lower = PRIMARY_SITE_CONSISTENCY_PROP - 1.96 * Standard_Error,
CI_Upper = PRIMARY_SITE_CONSISTENCY_PROP + 1.96 * Standard_Error
)
# Create the bar chart
ggplot(site_consistency_chromo_proptable, aes(x = CHROMOSOME, y = PRIMARY_SITE_CONSISTENCY_PROP)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
geom_errorbar(
aes(ymin = CI_Lower, ymax = CI_Upper),
width = 0.2,  # Width of the error bars
color = "black"
) +
labs(
title = "Comparing Proportions of Single Primary Site Mutations by Chromosome",
x = "Chromosome",
y = "Proportion of Mutations with Single Primary Site",
) +
theme_minimal() +
coord_cartesian(ylim = c(0.78, 0.89))  # Adjust the y-axis limits as needed
.libPaths(/Users/emilychaiadams/Documents/EDA R Project/Packages)
.libPaths(Users/emilychaiadams/Documents/EDA R Project/Packages)
.libPaths("Users/emilychaiadams/Documents/EDA R Project/Packages")
# Install tidyverse
install.packages("tidyverse")
.libPaths("Users/emilychaiadams/Documents/EDA R Project/Packages")
# Install tidyverse
install.packages("tidyverse")
# Load the tidyverse package
library(tidyverse)
# Set working directory
setwd("/Users/emilychaiadams/Documents/EDA R Project")
dir.create("Users/emilychaiadams/Documents/EDA R Project/Packages")
dir.create("/Users/emilychaiadams/Documents/EDA R Project/Packages")
.libPaths("Users/emilychaiadams/Documents/EDA R Project/Packages")
# Install tidyverse
install.packages("tidyverse")
install.packages('renv')
